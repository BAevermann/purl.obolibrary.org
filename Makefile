# OBO Purls Makefile
# 2015-11-06
# James A. Overton <james@overton.ca>
#
# This file contains code for working with
# Open Biomedical Ontoloiges (OBO)
# Persistent Uniform Resource Locators (PURLs).
#
# Required software:
#
# - [GNU Make](http://www.gnu.org/software/make/) to run this file
# - [kwalify](http://www.kuwata-lab.com/kwalify/) for YAML validation
# - [Python 3](https://www.python.org/downloads/) for translation to Apache
# - [PyYAML](http://pyyaml.org/wiki/PyYAML) for translation to Apache
# - [xmlstarlet](http://xmlstar.sourceforge.net) for migration from OCLC


### Configuration

# Run operations on these ontologies.
ONTOLOGY_IDS := obi

# Default goal: Generate an .htaccess file for each id in ONTOLOGY_IDS.
all: clean validate build

build: www/obo

clean:
	rm -rf validation www/obo

# Use awk with tabs
AWK := awk -F "	" -v "OFS=	"

# Do not automatically delete intermediate files.
.SECONDARY:

# These goals do not correspond to files.
.PHONY: all clean validate fetch migrate


### Validate YAML Config
#
# Use kwalify to validate YAML configuration file format.
validation:
	mkdir -p $@

# Validate a single YAML configuration file.
validation/%.txt: config/%.yml config/config.schema.yml validation
	kwalify -f config/config.schema.yml $< > $@
	@cat $@

# Validate configuration for all ontologies in ONTOLOGY_IDS.
# If any INVALID results are found, print them and exit with an error.
validate: validation/obo.txt $(foreach o,$(ONTOLOGY_IDS),validation/$o.txt)
	@grep -v 'valid.$$' validation/* && exit 1 || exit 0
	@grep 'INVALID' validation/* && exit 1 || exit 0


### Generate Apache Config
#
# Convert the YAML configuration files
# to Apache .htaccess files with RedirectMatch directives.
www/obo/%/.htaccess: config/%.yml
	mkdir -p www/obo/$*
	echo '# DO NOT EDIT THIS FILE!' > $@
	echo '# Automatically generated from $< on' $$(date) >> $@
	echo '' >> $@
	scripts/translate.py < $< >> $@

# Convert the special global OBO configuration.
www/obo/.htaccess: config/obo.yml
	mkdir -p www/obo
	echo '# DO NOT EDIT THIS FILE!' > $@
	echo '# Automatically generated from $< on' $$(date) >> $@
	echo '' >> $@
	scripts/translate.py < $< >> $@

# Convert configuration for all ontologies in ONTOLOGY_IDS.
www/obo: www/obo/.htaccess $(foreach o,$(ONTOLOGY_IDS),www/obo/$o/.htaccess)


### Fetch from OCLC
#
# Fetch records from OCLC in XML format.
migrate:
	mkdir -p $@

OCLC_XML = https://purl.org/admin/purl/?target=&seealso=&maintainers=&explicitmaintainers=&tombstone=false&p_id=

# Fetch first 100 PURLs for a given path from OCLC in XML format.
migrate/%.xml: migrate
	sleep 5
	curl -o $@ "$(OCLC_XML)/obo/$*/*"

# Fetch XML for all ontologies in the ONTOLOGY_IDS list.
fetch: $(foreach o,$(ONTOLOGY_IDS),migrate/$o.yml)


### Migrate Configuration from OCLC
#
# Translate OCLC XML files into YAML files.
# This should be a one-time migration.
# WARN: Don't overwrite newer configuration files!
config:
	mkdir -p $@

# Use xmlstarlet to convert XML to YAML format,
# then tweak the results with sed.
# Require XML file to be fetched manually.
# Do not overwrite existing config file.
config/%.yml:
	@test -s migrate/$*.xml || (echo 'Run "make migrate/$*.xml" first'; exit 1)
	@test ! -s $@ || (echo 'Refusing to overwrite $@'; exit 1)
	echo '# PURL configuration for http://purl.obolibrary.org/obo/$*/' > $@
	echo '' >> $@
	echo 'entries:' >> $@
	xmlstarlet sel \
	--template \
	--match '//purl' \
	--output '- type: ' --value-of 'type' \
	--output ' ' --value-of 'id' --nl \
	--output '  replacement: '   --value-of 'target/url' --nl \
	--nl \
	< migrate/$*.xml \
	| sed 's/^- type: 302 /- exact: /' \
	| sed 's/^- type: partial /- prefix: /' \
	| sed 's!: /obo/$*!: !' \
	>> $@

# Migrate XML to YAML for all ontologies in the ONTOLOGY_IDS list.
migrate: $(foreach o,$(ONTOLOGY_IDS),config/$o.yml)

